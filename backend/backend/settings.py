"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

def load_environment_variables():
    """
    Load .env file into a dictionary and validate critical variables.
    """
    # Load .env file
    env_file = os.path.join(BASE_DIR, '.env')
    if os.path.exists(env_file):
        load_dotenv(env_file)
        print(f"✅ Loaded environment variables from {env_file}")
    else:
        print(f"⚠️  Warning: .env file not found at {env_file}")
    
    # Create dictionary with all environment variables and defaults
    env_vars = {
        # Django Core Settings
        'SECRET_KEY': os.getenv("SECRET_KEY", "django-insecure-fallback-key-change-in-production"),
        'DEBUG': os.getenv("DEBUG", "True").lower() == "true",
        'ALLOWED_HOSTS': os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(","),
        
        # Mistral AI Configuration
        'MISTRAL_API_KEY': os.getenv("MISTRAL_API_KEY", ""),
        'API_URL': os.getenv("API_URL", "https://api.mistral.ai/v1/chat/completions"),
        'MAX_TOKENS': int(os.getenv("MAX_TOKENS", "4096")),
        'MAX_TOKENS_TITLE': int(os.getenv("MAX_TOKENS_TITLE", "64")),
        'TEMPERATURE': float(os.getenv("TEMPERATURE", "0.7")),
        'TEMPERATURE_TITLE': float(os.getenv("TEMPERATURE_TITLE", "0.1")),
        
        # Email Configuration
        'EMAIL_BACKEND': os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend"),
        'EMAIL_HOST': os.getenv("EMAIL_HOST", "smtp.gmail.com"),
        'EMAIL_HOST_USER': os.getenv("EMAIL_HOST_USER", ""),
        'EMAIL_PORT': int(os.getenv("EMAIL_PORT", "587")),
        'EMAIL_USE_TLS': os.getenv("EMAIL_USE_TLS", "True").lower() == "true",
        'EMAIL_HOST_PASSWORD': os.getenv("EMAIL_HOST_PASSWORD", ""),
        'DEFAULT_FROM_EMAIL': os.getenv("DEFAULT_FROM_EMAIL", os.getenv("EMAIL_HOST_USER", "")),
        
        # Frontend Configuration
        'FRONTEND_URL': os.getenv("FRONTEND_URL", "http://localhost:3000"),
        
        # JWT Configuration
        'JWT_ALGORITHM': os.getenv("JWT_ALGORITHM", "RS256"),
        'JWT_PRIVATE_KEY_PATH': os.getenv("JWT_PRIVATE_KEY_PATH", "./keys/private.pem"),
        'JWT_PUBLIC_KEY_PATH': os.getenv("JWT_PUBLIC_KEY_PATH", "./keys/public.pem"),
        'JWT_ACCESS_TOKEN_LIFETIME_MINUTES': int(os.getenv("JWT_ACCESS_TOKEN_LIFETIME_MINUTES", "300")),
        'JWT_REFRESH_TOKEN_LIFETIME_DAYS': int(os.getenv("JWT_REFRESH_TOKEN_LIFETIME_DAYS", "1")),
        'JWT_PRIVATE_KEY': os.getenv("JWT_PRIVATE_KEY", ""),
        'JWT_PUBLIC_KEY': os.getenv("JWT_PUBLIC_KEY", ""),
        
        # CORS and CSRF Configuration
        'CORS_ALLOWED_ORIGINS': os.getenv("CORS_ALLOWED_ORIGINS", "http://localhost:3000").split(","),
        'CSRF_TRUSTED_ORIGINS': os.getenv("CSRF_TRUSTED_ORIGINS", "http://localhost:3000").split(","),
        'CORS_ALLOW_ALL_ORIGINS': os.getenv("CORS_ALLOW_ALL_ORIGINS", "False").lower() == "true",
    }
    
    # Validate critical variables
    critical_vars = ['SECRET_KEY', 'MISTRAL_API_KEY']
    missing_vars = []
    for var in critical_vars:
        if not env_vars[var]:
            missing_vars.append(var)
    
    if missing_vars:
        print("❌ Missing required environment variables:")
        for var in missing_vars:
            print(f"   - {var}")
        print("\nPlease add these variables to your .env file.")
        exit(1)
    
    print("✅ Environment variables loaded successfully!")
    return env_vars

# Load environment variables into dictionary
ENV_VARS = load_environment_variables()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Assign variables from dictionary
SECRET_KEY = ENV_VARS['SECRET_KEY']
DEBUG = ENV_VARS['DEBUG']
ALLOWED_HOSTS = ENV_VARS['ALLOWED_HOSTS']

# Application definition
AUTH_USER_MODEL = "authentication.CustomUser"

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "authentication",
    "messaging",
    "corsheaders"
]

# Mistral AI Configuration
MISTRAL_API_KEY = ENV_VARS['MISTRAL_API_KEY']
API_URL = ENV_VARS['API_URL']
MAX_TOKENS = ENV_VARS['MAX_TOKENS']
MAX_TOKENS_TITLE = ENV_VARS['MAX_TOKENS_TITLE']
TEMPERATURE = ENV_VARS['TEMPERATURE']
TEMPERATURE_TITLE = ENV_VARS['TEMPERATURE_TITLE']

# Email Configuration
EMAIL_BACKEND = ENV_VARS['EMAIL_BACKEND']
EMAIL_HOST = ENV_VARS['EMAIL_HOST']
EMAIL_HOST_USER = ENV_VARS['EMAIL_HOST_USER']
EMAIL_PORT = ENV_VARS['EMAIL_PORT']
EMAIL_USE_TLS = ENV_VARS['EMAIL_USE_TLS']
EMAIL_HOST_PASSWORD = ENV_VARS['EMAIL_HOST_PASSWORD']
DEFAULT_FROM_EMAIL = ENV_VARS['DEFAULT_FROM_EMAIL']

# Frontend Configuration
FRONTEND_URL = ENV_VARS['FRONTEND_URL']

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
}

# JWT Configuration
def get_jwt_key(key_type):
    """Get JWT key from environment variable or file path"""
    key_content = ENV_VARS.get(f'JWT_{key_type}_KEY')
    if key_content:
        return key_content
    else:
        # Fallback to file path
        try:
            with open(ENV_VARS[f'JWT_{key_type}_KEY_PATH'], 'r') as f:
                return f.read()
        except FileNotFoundError:
            print(f"❌ JWT {key_type} key not found in environment or file")
            exit(1)

SIMPLE_JWT = {
    "ALGORITHM": ENV_VARS['JWT_ALGORITHM'],
    "SIGNING_KEY": get_jwt_key('PRIVATE'),
    "VERIFYING_KEY": get_jwt_key('PUBLIC'),
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=ENV_VARS['JWT_ACCESS_TOKEN_LIFETIME_MINUTES']),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=ENV_VARS['JWT_REFRESH_TOKEN_LIFETIME_DAYS']),
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS Configuration from dictionary
#CORS_ALLOWED_ORIGINS = ENV_VARS['CORS_ALLOWED_ORIGINS']

# CSRF Configuration for cross-origin requests
CSRF_TRUSTED_ORIGINS = ENV_VARS['CSRF_TRUSTED_ORIGINS']
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ALL_ORIGINS = ENV_VARS['CORS_ALLOW_ALL_ORIGINS']